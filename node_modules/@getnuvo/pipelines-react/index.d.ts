import { IPipelineListItem } from './common/types/pipeline.types';
import { IConnectorListItem } from './common/types/connector.types';
import {
  IConnectorDetailResponse,
  ITdmItemResponse,
} from './common/api/services/generated/types/index.types';

export type ILanguage = 'en' | 'de';

export type ICreatePipeline = {
  accessToken: string;
  templateId?: string;
  configuration?: ICreatePipelineConfiguration;
  settings?: ICreatePipelineSettings;
  onPipelineCreate?: ICreatePipelineOnPipelineCreate;
  onConnectorCreate?: IOnConnectorCreate;
  onTdmCreate?: IOnTDMCreate;
  onExecutionView?: ICreatePipelineOnExecutionView;
  onClose?: IOnClose;
};

export type ICreatePipelineProps = ICreatePipeline;

export type ICreatePipelineConfiguration = {
  name?: string;
  tdmId?: string;
  inputConnectorId?: string;
  outputConnectorId?: string;
  errorConfig?: ICreatePipelineErrorConfig;
  scheduleConfig?: ICreatePipelineScheduleConfig;
  developerMode?: boolean;
};

export type ICreatePipelineErrorConfig = {
  errorThreshold?: number;
};

export type ICreatePipelineScheduleConfig = {
  frequency?: ICreatePipelineScheduleFrequency;
  startsOn?: string;
  endsOn?: string;
  interval?: number;
};

export type ICreatePipelineScheduleFrequency =
  | 'HOURLY'
  | 'DAILY'
  | 'WEEKLY'
  | 'MONTHLY';

export type ICreatePipelineOnPipelineCreate = (
  args: ICreatePipelineOnPipelineCreateProps,
) => void;

export type IOnClose = () => void;

export type IConnectorType = 'input' | 'output';

export type IOnConnectorCreate = (params: {
  reload: () => void;
  type: IConnectorType;
}) => void;

export type IOnTDMCreate = ({ reload }: { reload: () => void }) => void;

export type ICreatePipelineOnPipelineCreateProps = {
  data: IPipelineDetails;
  execution?: IExecutionItemResponse;
};

export type ICreatePipelineOnExecutionView = ({
  data,
}: {
  data: string;
}) => void;

export type ISettingsBase = {
  language?: ILanguage;
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  i18nOverrides?: any; // I18nOverrides;
  modal?: boolean;
};

export type ICreatePipelineSettings = ISettingsBase & {
  allowTdmCreation?: boolean;
  allowInputConnectorCreation?: boolean;
  allowOutputConnectorCreation?: boolean;
  runPipelineOnCreation?: boolean;
};

export declare const CreatePipeline: (
  props: ICreatePipelineProps,
) => JSX.Element;

export declare const PipelineDetails: (
  props: IPipelineDetailsProps,
) => JSX.Element;

export declare const ExecutionList: (props: IExecutionListProps) => JSX.Element;

export type IExecutionDetailsProps = {
  accessToken: string;
  executionId: string;
  settings?: ISettingsBase;
  onExecutionRun?: IOnExecutionRun;
  onClose?: IOnClose;
};

export type IOnExecutionRun = ({
  data,
}: {
  data: IExecutionDataResponse;
}) => void;

export type IOnExecutionView = ({
  data,
}: {
  data: IExecutionItemResponse;
}) => void;

// TODO: update type of data
export type IOnPipelineView = (params: { data: IPipelineListItem }) => void;

export type IOnPipelineCreate = () => void;

export type ICreatePipelineHooksLogs = {
  hasOnClose: boolean;
  hasOnPipelineCreate: boolean;
  hasOnConnectorCreate: boolean;
  hasOnTdmCreate: boolean;
  hasOnExecutionView: boolean;
};

export type IExecutionDetailsHooksLogs = {
  hasOnClose: boolean;
  hasOnExecutionRun: boolean;
};

export type IBuildInfo = {
  framework: 'react' | 'angular' | 'vue' | 'vanilla';
  frameworkVersion: string;
  origin: string;
  version: string;
};

export type IPipelineDetailsHooksLogs = {
  hasOnPipelineDelete: boolean;
  hasOnClose: boolean;
  hasOnPipelineUpdate: boolean;
  hasOnExecutionRun: boolean;
  hasOnConnectorCreate: boolean;
  hasOnTdmCreate: boolean;
  // hasOnPipelineDuplicate: boolean;
};

export type IPipelineDetailsSettings = ISettingsBase & {
  allowTdmCreation?: boolean;
  allowInputConnectorCreation?: boolean;
  allowOutputConnectorCreation?: boolean;
  showExecutionList?: boolean;
};

export type IPipelineDetailsProps = {
  accessToken: string;
  pipelineId: string;
  settings?: IPipelineDetailsSettings;
  onClose?: IOnClose;
  onPipelineDelete?: IOnPipelineDelete;
  onConnectorCreate?: IOnConnectorCreate;
  onTdmCreate?: IOnTDMCreate;
  onPipelineUpdate?: IOnPipelineUpdate;
  onExecutionRun?: IOnExecutionRun;
  onExecutionView?: IOnExecutionView;
  // NOTE: scoped out
  // onPipelineDuplicate?: IOnPipelineDuplicate;
};

export type IOnPipelineDelete = (
  pipeline: IPipelineDetailsConfiguration,
) => void;

export type IOnPipelineUpdate = (
  pipeline: IPipelineDetailsConfiguration,
) => void;

// export type IOnPipelineDuplicate = (
//   pipeline: IPipelineDetailsConfiguration,
// ) => void;

export type IPipelineDetailsConfiguration = {
  id: string;
  name: string;
  draft?: boolean;
  active?: boolean;
  configuration: {
    developerMode?: boolean;
    inputConnectors: string[];
    outputConnectors: string[];
    tdm?: string;
    headerConfig: {
      type: 'SMART' | 'STATIC';
      rowIndex?: number;
    };
    mappingConfig?: {
      mode: 'DEFAULT';
      mappings: {
        sourceColumns: string[];
        targetColumn: string;
        transformations: (
          | {
              name: string;
              type: 'HYPER_FORMULA' | 'JAVASCRIPT';
              function: string;
            }
          | {
              name: string;
              type: 'OPTION_MAPPING';
              mappings: {
                source_values: (string | null)[];
                target_options: string[];
              }[];
            }
        )[];
      }[];
    };
    errorConfig?: {
      errorThreshold?: number;
    };
    scheduleConfig?: {
      frequency?: 'HOURLY' | 'DAILY' | 'WEEKLY' | 'MONTHLY';
      interval?: number;
      startsOn?: Date;
      endsOn?: Date;
    };
  };
  createdAt?: Date;
  updatedAt?: Date;
  createdBy?: {
    id: string;
    name: string;
    identifier: string;
    type: 'SUB_ORG' | 'USER';
  };
  updatedBy?: {
    id: string;
    name: string;
    identifier: string;
    type: 'SUB_ORG' | 'USER';
  };
  meta?: {
    totalExecutionsLive: number;
    totalExecutionsDev: number;
    totalRowsDev: number;
    totalRowsLive: number;
    lastExecutedAt?: Date;
  };
};

export enum ExecutionTriggerType {
  MANUAL = 'MANUAL',
  SCHEDULED = 'SCHEDULED',
  EVENT = 'EVENT',
}

export enum ExecutionStatus {
  SUCCESSFUL = 'SUCCESSFUL',
  FAILED = 'FAILED',
  PROCESSING = 'PROCESSING',
}

export enum ExecutionErrorType {
  SOURCE_UNRESPONSIVE = 'SOURCE_UNRESPONSIVE',
  SOURCE_DATA_EMPTY = 'SOURCE_DATA_EMPTY',
  DESTINATION_UNRESPONSIVE = 'DESTINATION_UNRESPONSIVE',
  DESTINATION_SIZE_LIMIT = 'DESTINATION_SIZE_LIMIT',
  WRITE_FILE_FAILURE = 'WRITE_FILE_FAILURE',
  TRANSFORMATION_FAILURE = 'TRANSFORMATION_FAILURE',
  ERROR_THRESHOLD_EXCEEDED = 'ERROR_THRESHOLD_EXCEEDED',
  PARSING_FAILURE = 'PARSING_FAILURE',
  EXECUTION_ID_NOT_FOUND = 'EXECUTION_ID_NOT_FOUND',
  EXECUTION_TIMEOUT = 'EXECUTION_TIMEOUT',
  PARSING_OUTPUT_FAILURE = 'PARSING_OUTPUT_FAILURE',
  MAPPING_VALIDATION_FAILURE = 'MAPPING_VALIDATION_FAILURE',
  FETCH_OPTION_FAILURE = 'FETCH_OPTION_FAILURE',
  ADVANCED_CLEANING_FAILURE = 'ADVANCED_CLEANING_FAILURE',
  ADVANCED_VALIDATION_FAILURE = 'ADVANCED_VALIDATION_FAILURE',
}

export enum IFrequency {
  HOURLY = 'HOURLY',
  DAILY = 'DAILY',
  WEEKLY = 'WEEKLY',
  MONTHLY = 'MONTHLY',
}

export enum ConfigurationType {
  PIPELINE = 'PIPELINE',
  TEMPLATE = 'TEMPLATE',
  EXECUTION = 'EXECUTION',
}

export enum HeaderType {
  SMART = 'SMART',
  STATIC = 'STATIC',
}

export enum TransformationType {
  JAVASCRIPT = 'JAVASCRIPT',
  HYPER_FORMULA = 'HYPER_FORMULA',
  OPTION_MAPPING = 'OPTION_MAPPING',
}

export type IExecutionConfiguration = {
  input_connectors?: string[];
  output_connectors?: string[];
  tdm?: string;
  error_config?: {
    error_threshold?: number;
  };
  schedule_config?: {
    frequency?: IFrequency;
    interval?: number;
    starts_on?: string;
    ends_on?: string;
  };
  header_config?: {
    type?: HeaderType;
    row_index?: number;
  };
  developer_mode?: boolean;
  configuration_type?: ConfigurationType;
  mapping_config?: {
    mode?: 'DEFAULT';
    mappings?: {
      source_columns?: string[];
      target_column?: string;
      transformations?: (
        | {
            name?: string;
            type?:
              | TransformationType.HYPER_FORMULA
              | TransformationType.JAVASCRIPT;
            function?: string;
          }
        | {
            name?: string;
            type?: TransformationType.OPTION_MAPPING;
            allow_unmapped_values?: boolean;
            mappings?: {
              source_values?: (string | null)[];
              target_options?: string[];
            }[];
          }
      )[];
    }[];
  };
};

export type IExecutionDataResponse = {
  trigger_type?: ExecutionTriggerType;
  status?: ExecutionStatus;
  configuration?: IExecutionConfiguration;
  duration?: number;
  start_at?: string;
  error?: {
    type?: ExecutionErrorType;
    message?: string;
    raw_error?: string;
  };
  index?: number;
} & {
  id?: string;
  createdAt?: string;
  updatedAt?: string;
  created_by?: {
    id?: string;
    name?: string;
  };
  updated_by?: {
    id?: string;
    name?: string;
  };
};

export declare const ExecutionDetails: (
  props: IExecutionDetailsProps,
) => JSX.Element;

export type IExecutionListProps = {
  accessToken: string;
  pipelineId?: string | null;
  settings?: ISettingsBase;
  onClose?: IOnClose;
  onExecutionView?: IOnExecutionView;
};

export type IExecutionListHooksLogs = {
  hasOnExecutionView: boolean;
  hasOnClose: boolean;
};

export type IPipelineListSettings = ISettingsBase & {
  allowPipelineCreation?: boolean;
};

export declare const PipelineList: (props: IPipelineListProps) => JSX.Element;

export type IPipelineListProps = {
  accessToken: string;
  settings?: IPipelineListSettings;
  onPipelineView?: IOnPipelineView;
  onPipelineCreate?: IOnPipelineCreate;
  onClose?: IOnClose;
};

export type IPipelineListHooksLogs = {
  hasOnPipelineView: boolean;
  hasOnPipelineCreate: boolean;
  hasOnClose: boolean;
};

export declare const CreateConnector: (
  props: ICreateConnectorProps,
) => JSX.Element;

export type ICreateConnectorProps = {
  accessToken: string;
  configuration?: ICreateConnectorConfiguration;
  settings?: ICreateConnectorSettings;
  onConnectorCreate?: ICreateConnectorOnConnectorCreate;
  onClose?: IOnClose;
};

export type ICreateConnectorConfiguration = {
  name?: string;
  type?: IConnectorType;
};

export type ICreateConnectorSettings = ISettingsBase & {
  allowedInputConnectors?: (NodeType | `${NodeType}`)[];
  allowedOutputConnectors?: (NodeType | `${NodeType}`)[];
};

export type ICreateConnectorOnConnectorCreate = ({
  data,
}: {
  data: IConnectorDetailResponse;
}) => void;

export type ICreateConnectorHooksLogs = {
  hasOnConnectorCreate: boolean;
  hasOnClose: boolean;
};

export enum NodeType {
  AZURE = 'AZURE',
  EMAIL = 'EMAIL',
  FTP = 'FTP',
  S3 = 'S3',
  HTTP = 'HTTP',
  GCS = 'GCS',
  MANUAL = 'MANUAL',
}

export enum connectorType {
  INPUT = 'input',
  OUTPUT = 'output',
}

export declare const CreateTargetDataModel: (
  props: ICreateTargetDataModelProps,
) => JSX.Element;

export type ICreateTargetDataModelProps = {
  accessToken: string;
  configuration?: ICreateTargetDataModelConfiguration;
  settings?: ISettingsBase;
  onTargetDataModelCreate?: ICreateTargetDataModelOnTargetDataModelCreate;
  onClose?: IOnClose;
};

export type ICreateTargetDataModelConfiguration = {
  name?: string;
};

export type ICreateTargetDataModelOnTargetDataModelCreate = ({
  data,
}: {
  data: ITdmItemResponse;
}) => void;

export type ICreateTargetDataModelHooksLogs = {
  hasOnTargetDataModelCreate: boolean;
  hasOnClose: boolean;
};

export enum FileType {
  CSV = 'csv',
  TSV = 'tsv',
  XLS = 'xls',
  XLSX = 'xlsx',
  JSON = 'json',
  XML = 'xml',
}

export declare const FileUploader: (props: IFileUploaderProps) => JSX.Element;

export type IFileUploaderProps = {
  accessToken: string;
  inputConnectorId: string;
  settings?: IFileUploaderSettings;
  onExecutionView?: IFileUploaderOnExecutionView;
  onClose?: IOnClose;
};

export type IFileUploaderSettings = ISettingsBase & {
  allowedFileTypes?: (FileType | `${FileType}`)[];
};

export type IFileUploaderOnExecutionView = ({
  execution,
}: {
  execution: string;
}) => void;

export type IFileUploaderHooksLogs = {
  hasOnExecutionView: boolean;
  hasOnClose: boolean;
};

export type IOnTargetDataModelUpdate = ({
  data,
}: {
  data?: ITdmItemResponse;
}) => void;

export type IOnTargetDataModelDelete = ({
  data,
}: {
  data?: ITdmItemResponse;
}) => void;

export declare const TargetDataModelDetails: (
  props: ITargetDataModelDetailsProps,
) => JSX.Element;

export type ITargetDataModelDetailsProps = {
  accessToken: string;
  targetDataModelId: string;
  settings?: ISettingsBase;
  onTargetDataModelUpdate?: IOnTargetDataModelUpdate;
  onTargetDataModelDelete?: IOnTargetDataModelDelete;
  onClose?: IOnClose;
};

export declare const ConnectorDetails: (
  props: IConnectorDetailsProps,
) => JSX.Element;

export type IConnectorDetailsProps = {
  accessToken: string;
  connectorId: string;
  settings?: ISettingsBase;
  onClose?: IOnClose;
};

export type IOnConnectorUpdate = ({
  data,
}: {
  data: IConnectorDetailResponse;
}) => void;
export type IOnConnectorDelete = ({
  data,
}: {
  data: IConnectorDetailResponse;
}) => void;

export type IOnTargetDataModelView = ({
  data,
}: {
  data?: ITdmItemResponse;
}) => void;

export type IOnTargetDataModelCreate = () => void;

export declare const TargetDataModelList: (
  props: ITargetDataModelListProps,
) => JSX.Element;

export type ITargetDataModelListProps = {
  accessToken: string;
  settings?: ISettingsBase & {
    allowTargetDataModelCreation?: boolean;
  };
  onTargetDataModelView?: IOnTargetDataModelView;
  onTargetDataModelCreate?: IOnTargetDataModelCreate;
  onClose?: IOnClose;
};
type IOnConnectorCreateList = () => void;

export type IOnConnectorView = (params: { data: IConnectorListItem }) => void;

export declare const ConnectorList: (props: IConnectorListProps) => JSX.Element;

export type IConnectorListProps = {
  accessToken: string;
  settings?: IConnectorListSettings;
  onConnectorView?: IOnConnectorView;
  onConnectorCreate?: IOnConnectorCreateList;
  onClose?: IOnClose;
};

export type IConnectorListSettings = ISettingsBase & {
  modal?: boolean;
  allowConnectorCreation?: boolean;
};

export type IConnectorListHooksLogs = {
  hasOnConnectorView: boolean;
  hasOnConnectorCreate: boolean;
  hasOnClose: boolean;
};
